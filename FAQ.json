{
  "questions": [
    "What is Pass Guard Suite?",
    "How does 2FA/TOTP work?",
    "Is Pass Guard Suite free to use?",
    "Which platforms does Pass Guard Suite support?",
    "Is my data secure?",
    "How do I set up Pass Guard Suite?",
    "What environment variables do I need?",
    "Do I need a Supabase account?",
    "Can I use a different database instead of Supabase?",
    "How do I add a new 2FA account?",
    "What is a secret key and where do I find it?",
    "Can I export my 2FA accounts?",
    "Does Pass Guard Suite support different TOTP algorithms?",
    "What happens if I lose my device?",
    "Can I use Pass Guard Suite offline?",
    "Does Pass Guard Suite support dark mode?",
    "How can I contribute to the project?",
    "What UI component library does the project use?",
    "Can I customize the appearance of Pass Guard Suite?",
    "Are my TOTP secrets encrypted?",
    "What security considerations should I know about?"
  ],
  "answers": [
    "Pass Guard Suite is a secure 2FA (Two-Factor Authentication) authenticator application that generates time-based one-time passwords (TOTP) for your online accounts. It's built with React, TypeScript, Vite, and Supabase, providing a modern and secure solution for managing your 2FA codes.",
    "Two-Factor Authentication (2FA) using TOTP (Time-based One-Time Password) generates a unique 6 or 8-digit code that changes every 30 seconds. This code is generated using a shared secret key between your authenticator app and the service provider. Even if someone knows your password, they can't access your account without the current TOTP code.",
    "Yes, Pass Guard Suite is an open-source project and is free to use. You can self-host it using your own Supabase instance or contribute to the project on GitHub.",
    "Pass Guard Suite is a web-based application that works on any modern browser (Chrome, Firefox, Safari, Edge) on desktop, tablet, and mobile devices. Since it's built with responsive design, it adapts to any screen size.",
    "The application uses industry-standard encryption practices and stores your TOTP secrets securely. All data is stored in your private Supabase database. However, note that the current version is in development, and passwords are stored as plain text. For production use, implement proper password hashing and enable Row Level Security (RLS) in Supabase.",
    "To set up Pass Guard Suite: 1. Clone the repository from GitHub 2. Install dependencies with 'npm install' 3. Create a Supabase project and get your credentials 4. Set up environment variables in '.env' file 5. Run database migrations from '/supabase/migrations/' 6. Start the development server with 'npm run dev'",
    "You need two environment variables: VITE_SUPABASE_URL (Your Supabase project URL) and VITE_SUPABASE_PUBLISHABLE_KEY (Your Supabase anonymous/public key). Both can be found in your Supabase project settings under API.",
    "Yes, Pass Guard Suite uses Supabase as its backend database. You'll need to create a free Supabase account at supabase.com and set up a new project to use the application.",
    "While the application is built for Supabase, you could potentially adapt it to use another PostgreSQL database. However, this would require modifying the database client configuration in the '/src/integrations/supabase/' directory.",
    "You can add accounts in three ways: 1. Manual Entry - Enter the provider name, account name, and secret key manually 2. URI Import - Paste an otpauth:// URI 3. QR Code Scan - Upload a QR code image to automatically extract the account details",
    "The secret key (also called seed or shared secret) is a Base32-encoded string provided by the service when you enable 2FA. It's usually shown as a text string alongside the QR code. This key is used to generate TOTP codes.",
    "Yes, the application includes a QR Export feature that allows you to generate QR codes for any of your stored accounts. This is useful for backing up your accounts or transferring them to another device.",
    "Yes, Pass Guard Suite supports three algorithms: SHA1 (most common), SHA256, and SHA512. It also supports both 6-digit and 8-digit codes with customizable time periods.",
    "Since your data is stored in Supabase, you can access your accounts from any device by logging in with your username and password. However, it's recommended to keep backup codes provided by services when enabling 2FA, or export your accounts as QR codes for backup.",
    "No, Pass Guard Suite requires an internet connection to authenticate and sync with the Supabase database. However, once loaded, the TOTP generation happens locally in your browser using the Web Crypto API.",
    "Yes! Pass Guard Suite includes a full theme system with light mode, dark mode, and automatic system preference detection. You can toggle between themes using the theme switcher in the application.",
    "Contributions are welcome! You can: Report bugs or request features via GitHub Issues, Submit pull requests with improvements, Improve documentation, or Share the project with others. Follow the standard fork-and-pull-request workflow on GitHub.",
    "Pass Guard Suite uses shadcn-ui, a collection of re-usable components built with Radix UI and Tailwind CSS. This provides a consistent, accessible, and customizable component library.",
    "Yes, the project uses Tailwind CSS for styling, making it easy to customize colors, spacing, and layout. The theme configuration is in 'tailwind.config.js', and component styles can be modified in the 'src/components/' directory.",
    "The application includes encryption infrastructure using the Web Crypto API with AES-GCM 256-bit encryption and PBKDF2 key derivation. However, encryption is not yet active in the current data flow. This is prepared for future integration to enhance security.",
    "Important security notes: Development Warning - Passwords are currently stored as plain text. Implement proper password hashing (bcrypt, argon2) for production use. RLS Disabled - Row Level Security is disabled in development. Enable it for production to prevent unauthorized data access. Self-Hosting - Since you control the Supabase instance, you're responsible for securing your database and managing access credentials. HTTPS Required - Always use HTTPS in production to prevent man-in-the-middle attacks. Backup Codes - Keep service-provided backup codes in a secure location in case of emergency access needs."
  ]
}
